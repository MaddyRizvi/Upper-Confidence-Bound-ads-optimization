# -*- coding: utf-8 -*-
"""Copy of upper_confidence_bound.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UYPCCxbqatnU1wBvUsU5h1SpD0NqRyaF

# Upper Confidence Bound (UCB)

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Importing the dataset"""

dataset = pd.read_csv('Ads_CTR_Optimisation.csv')

"""## Implementing UCB"""

import math
N = 10000    # Total number of users (rounds)
d = 10        # Number of different ads (arms)
ads_selected = []    # Stores which ad was shown to the user at each round
numbers_of_selections = [0] * d    # N(n) Counts how many times each ad was shown
sums_of_rewards = [0] * d         # R(n) Sum of rewards (clicks) for each ad (initialized at 0 as no ads are selected at beginning)
total_reward = 0

for n in range(0, N): # Outer loop — for each user
  ad = 0
  max_upper_bound = 0

  for i in range(0, d):
    if (numbers_of_selections[i] > 0): # Inner loop — for each ad
       # Compute upper_bound
       # Select ad with highest UCB
      average_reward = sums_of_rewards[i] / numbers_of_selections[i]
      delta_i = math.sqrt(3/2 * math.log(n + 1) / numbers_of_selections[i])
      upper_bound = average_reward + delta_i
    else:
      upper_bound = 1e400
    if (upper_bound > max_upper_bound):
      max_upper_bound = upper_bound
      ad = i

  # AFTER inner loop ends — but still inside the outer loop:
  ads_selected.append(ad)
  numbers_of_selections[ad] = numbers_of_selections[ad] + 1
  reward = dataset.values[n, ad]
  sums_of_rewards[ad] = sums_of_rewards[ad] + reward
  total_reward = total_reward + reward

"""## Visualising the results"""

print(ads_selected)

plt.hist(ads_selected)
plt.title('Histogram of ads selections')
plt.xlabel('Ads')
plt.ylabel('Number of times each ad was selected')
plt.show()